import java.io.IOException;

import javax.microedition.midlet.MIDlet;
import javax.microedition.midlet.MIDletStateChangeException;
import javax.microedition.lcdui.Canvas;
import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Graphics;
import javax.microedition.lcdui.StringItem;
import javax.microedition.lcdui.Form;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.Image;
import javax.bluetooth.*;
import javax.obex.*;


public class Tic extends MIDlet implements CommandListener{
	Canvas MyCanvas, MyCanvas2;
	Form MyForm;
	Image MyImage;
	StringItem strng1, SingleP, MultiP;
	Command SP, MP, About, Help, Exit;
	int Arr[][], i ,j, k, l, flag;
	boolean answer;

	public Tic() {
		// TODO Auto-generated constructor stub
		Arr = new int[3][3];
		for(i=0;i<3;i++)
			for(j=0;j<3;j++)
				Arr[i][j]=0;
		answer = false;
		i=0;
		j=0;
		k=0;
		l=0;
		flag=-1;
		strng1 = new StringItem("Tic Tac Toe", "");
		MyForm = new Form("Tic Tac Toe");
		SP = new Command("Single Player", Command.OK, 1);
		MP = new Command("Multi Player", Command.OK, 2);
		SingleP = new StringItem("Single Player", "Start a new game");
		MultiP = new StringItem("Multi Player", "Start a new game over bluetooth");
		MyForm.append(SingleP);
		MyForm.append(MultiP);
		MyForm.addCommand(SP);
		MyForm.addCommand(MP);
		MyForm.setCommandListener(this);
		MyCanvas = new Canvas() {
			
			protected void paint(Graphics g) {
				// TODO Auto-generated method stub
				if(l==1)
				{
					g.setColor(0, 0, 0);
					for(i=0;i<3;i++)
						for(j=0;j<3;j++)
					{	if(Arr[i][j]==1)
							g.drawArc((50+50*(i))+5, (100+50*(j))+5, 40, 40, 0, 360);
						else if(Arr[i][j]==2)
						{
							g.drawLine((50+50*(i))+5, (100+50*(j))+5, (50+50*(i+1))-5, (100+50*(j+1))-5);
							g.drawLine((50+50*(i))+5, (100+50*(j+1))-5, (50+50*(i+1))-5, (100+50*(j))+5);
						}
						Arr[i][j]=0;
					}
					answer = false;
					i=0;
					j=0;
					k=0;
					l=0;
					flag=-1;
					g.fillRect(10, 280, 100, 40);
					strng1.setText("");
				}
				g.setColor(255, 255, 255);
				MyCanvas.setFullScreenMode(true);
				g.drawString(strng1.getLabel(), 10, 10, 0);
				g.drawString("Reset", 180, 10, 0);
				g.drawLine(50, 100, 200, 100);
				g.drawLine(50, 150, 200, 150);
				g.drawLine(50, 200, 200, 200);
				g.drawLine(50, 250, 200, 250);
				g.drawLine(50, 100, 50, 250);
				g.drawLine(100, 100, 100, 250);
				g.drawLine(150, 100, 150, 250);
				g.drawLine(200, 100, 200, 250);
				for(i=0;i<3;i++)
					for(j=0;j<3;j++)
				{	if(flag==1 && Arr[i][j]==1 && answer == false)
						g.drawArc((50+50*(i))+5, (100+50*(j))+5, 40, 40, 0, 360);
					else if(flag==-1 && Arr[i][j]==2 && answer == false)
					{
						g.drawLine((50+50*(i))+5, (100+50*(j))+5, (50+50*(i+1))-5, (100+50*(j+1))-5);
						g.drawLine((50+50*(i))+5, (100+50*(j+1))-5, (50+50*(i+1))-5, (100+50*(j))+5);
					}
				}
				if(k==1)
				{
					g.drawString(strng1.getText(), 10, 280, 0);
					answer = true;
					k++;
				}
			}

			protected void pointerPressed(int x, int y) {
				// TODO Auto-generated method stub
				super.pointerPressed(x, y);
				
				if(x>50 && x<200 && y>100 && y<250)
				{	
					i=(x-50)/50;
					j=(y-100)/50;
					if(Arr[i][j]==0)
					{
					if(flag==(-1))
					Arr[i][j]=1;
					else
						Arr[i][j]=2;
					flag = flag * (-1);
					}
				}
				else if (x>160&&x<240 && y>0 && y<60)
				{
					l=1;
				}
				if(k==0)
				k=result();
				repaint();
			}

			protected int result()
			{
				for(i=0;i<3;i++)
				{if((Arr[i][0]==1 && Arr[i][1]==1 && Arr[i][2]==1) || (Arr[0][i]==1 && Arr[1][i]==1 && Arr[2][i]==1))
				{
					strng1.setText("Circle Wins");
					return 1;
				}
				else if((Arr[i][0]==2 && Arr[i][1]==2 && Arr[i][2]==2) || (Arr[0][i]==2 && Arr[1][i]==2 && Arr[2][i]==2))
				{
					strng1.setText("Cross Wins");
					return 1;
				}
				}
				
				if((Arr[0][0]==Arr[1][1] && Arr[1][1]==Arr[2][2] && Arr[0][0]==1) || (Arr[0][2]==Arr[1][1] && Arr[1][1]==Arr[2][0] && Arr[0][2]==1))
				{
					strng1.setText("Circle Wins");
					return 1;
				}
				else if((Arr[0][0]==Arr[1][1] && Arr[1][1]==Arr[2][2] && Arr[0][0]==2) || (Arr[0][2]==Arr[1][1] && Arr[1][1]==Arr[2][0] && Arr[0][2]==2))
				{
					strng1.setText("Cross Wins");
					return 1;
				}
				return 0;
			}
			
		};
	}

	protected void destroyApp(boolean arg0) throws MIDletStateChangeException {
		// TODO Auto-generated method stub
	}

	protected void pauseApp() {
		// TODO Auto-generated method stub

	}

	protected void startApp() throws MIDletStateChangeException {
		// TODO Auto-generated method stub
		Display.getDisplay(this).setCurrent(MyForm);
	}

	public void commandAction(Command c, Displayable d) {
		// TODO Auto-generated method stub
		if(c==SP)
		{
			Display.getDisplay(this).setCurrent(MyCanvas);
		}
	}
	
}
